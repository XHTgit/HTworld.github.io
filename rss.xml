<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>HT的小天地</title>
        <link>https://xhtgit.github.io/HTworld.github.io</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Tue, 21 Mar 2023 23:44:58 +0800</pubDate>
        <lastBuildDate>Tue, 21 Mar 2023 23:44:58 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://xhtgit.github.io/HTworld.github.io/2023/03/21/Node%20JS-%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E5%8F%8Anpm%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/</guid>
            <title>NodeJS-http模块</title>
            <link>https://xhtgit.github.io/HTworld.github.io/2023/03/21/Node%20JS-%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E5%8F%8Anpm%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/</link>
            <pubDate>Tue, 21 Mar 2023 23:44:58 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;模块化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#模块化&#34;&gt;#&lt;/a&gt; 模块化&lt;/h2&gt;
&lt;p&gt;模块化：是指解决一个复杂问题时，自顶向下逐层把系统划分成若干模块的过程。对于整个系统来说，模块是可组合、分解和更换的单元&lt;br&gt;
编程领域中的模块化，就是遵守固定的规则，把一个大文件拆成独立并互相依赖的多个小模块。&lt;br&gt;
把代码进行模块化拆分的好处&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提高了代码的复用性&lt;/li&gt;
&lt;li&gt;提高了代码的可维护性&lt;/li&gt;
&lt;li&gt;可以实现按需加载&lt;br&gt;
&lt;strong&gt;模块化规范&lt;/strong&gt;：就是对代码进行模块化的拆分与组合时，需要遵守的那些规则。例如使用什么样的语法格式来引用模块，在模块中使用什么样的语法格式向外暴露成员&lt;br&gt;
&lt;strong&gt;模块化规范的好处&lt;/strong&gt;：大家都遵守同样的模块化规范写代码，降低了沟通的成本，极大方便了各个模块之间的相互调用，利人利己&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nodejs-中的模块化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nodejs-中的模块化&#34;&gt;#&lt;/a&gt; Node.js 中的模块化&lt;/h3&gt;
&lt;p&gt;Node.js 中模块的分类&lt;/p&gt;
&lt;p&gt;Node.js 中根据模块来源的不同，将模块分为了 3 大类&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;内置模块（内置模块是由 Node.js 官方提供的，例如 fs、path、http 等）
自定义模块（用户创建的每个 .js 文件，都是自定义模块）
第三方模块（由第三方开发出来的模块，使用前需要先下载）
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;加载模块&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#加载模块&#34;&gt;#&lt;/a&gt; 加载模块&lt;/h4&gt;
&lt;p&gt;使用强大的  &lt;code&gt;require()&lt;/code&gt;  方法，可以加载需要的内置模块、用户自定义模块、第三方模块进行使用&lt;br&gt;
注意：使用 require () 方法加载其它模块时，会&lt;strong&gt;执行&lt;/strong&gt;被加载模块中的代码&lt;br&gt;
不用.js 后缀名也可以加载对应的文件。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const fs = require(&amp;#x27;fs&amp;#x27;)							// 内置模块&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const custom = require(&amp;#x27;./custom.js&amp;#x27;)	// 自定义模块，需指明路径，可以省略 .js 的后缀名&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const moment = require(&amp;#x27;moment&amp;#x27;)			// 第三方模块&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;nodejs-中的模块作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nodejs-中的模块作用域&#34;&gt;#&lt;/a&gt; Node.js 中的模块作用域&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;模块作用域&lt;/strong&gt;：和函数作用域类似，在自定义模块中定义的变量、方法等成员，只能在当前模块内被访问，这种模块级别的访问限制&lt;br&gt;
模块作用域的好处：防止了全局变量污染的问题&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 模块作用域&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const username = &amp;#x27;张三&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function sayHello() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(&amp;#x27;大家好，我是&amp;#x27; + username)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出是空对象，说明模块内定义的变量只能在模块内被访问&lt;/p&gt;
&lt;h4 id=&#34;向外共享模块作用域中的成员&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#向外共享模块作用域中的成员&#34;&gt;#&lt;/a&gt; 向外共享模块作用域中的成员&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;module 对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在每个 .js 自定义模块中都有一个 module 对象，它里面存储了和当前模块有关的信息&lt;br&gt;
&lt;strong&gt; module.exports 对象&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在自定义模块中，可以使用 module.exports 对象，将模块内的成员共享出去，供外界使用&lt;/li&gt;
&lt;li&gt;外界用 require () 方法导入自定义模块时，得到的就是 module.exports 所指向的对象，而一般默认该属性是 {} 即空对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 在一个自定义模块中，默认情况下， module.exports = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const age = 20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 向 module.exports 对象上挂载 username 属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;module.exports.username = &amp;#x27;zs&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 向 module.exports 对象上挂载 sayHello 方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;module.exports.sayHello = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(&amp;#x27;Hello!&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;module.exports.age = age//再共享出去&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 让 module.exports 指向一个全新的对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;module.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  nickname: &amp;#x27;小黑&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  sayHi() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(&amp;#x27;Hi!&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;exports-和-moduleexports-的使用误区&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#exports-和-moduleexports-的使用误区&#34;&gt;#&lt;/a&gt; exports 和 module.exports 的使用误区&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;由于 module.exports 单词写起来比较复杂，为了简化向外共享成员的代码，Node 提供了 exports 对象。默认情况下，exports 和 module.exports 指向同一个对象。最终共享的结果，还是以 module.exports 指向的对象为准。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时刻谨记，require () 模块时，得到的永远是 module.exports 指向的对象，若出现 exports 和 module.exports，最终不管 exports 怎么指向，都输出 module.exports。注意挂载属性和指向新对象的区别。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a3c927b4c4444ae5a9600655f27d2999~tplv-k3u1fbpfcp-watermark.image?&#34; alt=&#34;f4fb24bbee59bf4a5f9f58d8d2024bdb.png&#34;&gt;&lt;br&gt;
 &lt;code&gt;为了防止混乱，建议大家不要在同一个模块中同时使用 exports 和 module.exports&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 在一个自定义模块中，默认情况下， module.exports = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const age = 20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 向 module.exports 对象上挂载 username 属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;module.exports.username = &amp;#x27;zs&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 向 module.exports 对象上挂载 sayHello 方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;module.exports.sayHello = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(&amp;#x27;Hello!&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;module.exports.age = age&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 让 module.exports 指向一个全新的对象 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;module.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  nickname: &amp;#x27;小黑&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  sayHi() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(&amp;#x27;Hi!&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;nodejs-中的模块化规范&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nodejs-中的模块化规范&#34;&gt;#&lt;/a&gt; Node.js 中的模块化规范&lt;/h4&gt;
&lt;p&gt;Node.js 遵循了 CommonJS 模块化规范，CommonJS 规定了模块的特性和各模块之间如何相互依赖&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个模块内部，module 变量代表当前模块&lt;/li&gt;
&lt;li&gt;module 变量是一个对象，它的 exports 属性（即 module.exports）是对外的接口&lt;/li&gt;
&lt;li&gt;加载某个模块，其实是加载该模块的 module.exports 属性。require () 方法用于加载模块&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;npm与包&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#npm与包&#34;&gt;#&lt;/a&gt; npm 与包&lt;/h3&gt;
&lt;p&gt;Node.js 中的第三方模块又叫做包&lt;/p&gt;
&lt;p&gt;不同于 Node.js 中的内置模块与自定义模块，包是由第三方个人或团队开发出来的，免费供所有人使用。Node.js 中的包都是免费且开源的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;由于 Node.js 的内置模块仅提供了一些底层的 API，导致在基于内置模块进行项目开发的时，效率很低&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;包是基于内置模块封装出来的，提供了更高级、更方便的 API，极大的提高了开发效率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;包和内置模块之间的关系，类似于 jQuery 和 浏览器内置 API 之间的关系&lt;/p&gt;
&lt;p&gt;从 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tLyVFNyVCRCU5MSVFNyVBQiU5OSVFNCVCOCU4QSVFNiU5MCU5QyVFNyVCNCVBMiVFOCU4NyVBQSVFNSVCNyVCMSVFNiU4OSU4MCVFOSU5QyU4MCVFOCVBNiU4MSVFNyU5QSU4NCVFNSU4QyU4NQ==&#34;&gt;https://www.npmjs.com/ 网站上搜索自己所需要的包&lt;/span&gt;&lt;br&gt;
从 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZWdpc3RyeS5ucG1qcy5vcmcv&#34;&gt;https://registry.npmjs.org/&lt;/span&gt; 服务器上下载自己需要的包&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;npm, Inc. 公司提供了一个包管理工具，使用这个工具从 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZWdpc3RyeS5ucG1qcy5vcmcv&#34;&gt;https://registry.npmjs.org/&lt;/span&gt; 服务器把需要的包下载到本地使用。&lt;/p&gt;
&lt;p&gt;工具的名字叫做 Node Package Manager（简称 npm 包管理工具），这个包管理工具随着 Node.js 的安装包一起被安装到了用户的电脑上。在终端中&lt;/p&gt;
&lt;p&gt;执行 npm -v 命令，来查看自己电脑上所安装的 npm 包管理工具的版本号&lt;/p&gt;
&lt;h4 id=&#34;npm-安装&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#npm-安装&#34;&gt;#&lt;/a&gt; npm 安装&lt;/h4&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// dateFormat.js&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 1. 定义格式化时间的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function dateFormat(dtStr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  const dt = new Date(dtStr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  const y = dt.getFullYear()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  const m = padZero(dt.getMonth() + 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  const d = padZero(dt.getDate())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  const hh = padZero(dt.getHours())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  const mm = padZero(dt.getMinutes())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  const ss = padZero(dt.getSeconds())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return `$&amp;#123;y&amp;#125;-$&amp;#123;m&amp;#125;-$&amp;#123;d&amp;#125; $&amp;#123;hh&amp;#125;:$&amp;#123;mm&amp;#125;:$&amp;#123;ss&amp;#125;`&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 定义补零的函数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function padZero(n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return n &amp;gt; 9 ? n : &amp;#x27;0&amp;#x27; + n&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;module.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  dateFormat&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 1. 导入需要的包&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 注意：导入的名称，就是装包时候的名称&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const moment = require(&amp;#x27;moment&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//查文档看用法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const dt = moment().format(&amp;#x27;YYYY-MM-DD HH:mm:ss&amp;#x27;)//对时间进行格式化&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(dt)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 导入自定义的格式化时间的模块&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const TIME = require(&amp;#x27;./dateFormat&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 调用方法，进行时间的格式化&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const dt = new Date()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// console.log(dt)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const newDT = TIME.dateFormat(dt)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(newDT)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;在项目中安装包的命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在项目中安装包的命令&#34;&gt;#&lt;/a&gt; 在项目中安装包的命令&lt;/h4&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm install 包的完整名称&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;或者&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;npm i 包的完整名称&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;npm i 包的完整名称 包的完整名称（加空格可以安装多个包）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 导入自定义的格式化时间的模块&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const TIME = require(&amp;#x27;./dateFormat&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 调用方法，进行时间的格式化&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const dt = new Date()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// console.log(dt)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const newDT = TIME.dateFormat(dt)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(newDT)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;初次装包完成后，在项目文件夹下多一个叫做 node_modules 的文件夹和 package-lock.json 的配置文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;node_modules 文件夹用来存放所有已安装到项目中的包。require () 导入第三方包时，从这个目录中查找并加载&lt;/li&gt;
&lt;li&gt;package-lock.json 配置文件用来记录 node_modules 目录下的每一个包的下载信息，例如包的名字、版本号、下载地址等&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;quot;requires&amp;quot;: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;quot;lockfileVersion&amp;quot;: 1,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;quot;dependencies&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;moment&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;quot;version&amp;quot;: &amp;quot;2.29.1&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;quot;resolved&amp;quot;: &amp;quot;https://registry.npmjs.org/moment/-/moment-2.29.1.tgz&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;quot;integrity&amp;quot;: &amp;quot;sha512-kHmoybcPV8Sqy59DwNDY3Jefr64lK/by/da0ViFcuA4DH0vQg5Q6Ze5VimxkfQNSC+Mls/Kx53s7TjP1RhFEDQ==&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;不要手动修改 node_modules 或 package-lock.json文件中的任何代码，npm 包管理工具会自动维护它们&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;安装指定版本的包&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#安装指定版本的包&#34;&gt;#&lt;/a&gt; 安装指定版本的包&lt;/h4&gt;
&lt;p&gt;npm install 命令默认安装最新版本的包。如需安装指定版本的包，在包名之后，@&lt;/p&gt;
&lt;p&gt;npm i 包的完整名称 @版本号&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不用删除以前的版本，npm 会自动覆盖之前的版本。&lt;/p&gt;
&lt;h4 id=&#34;版本号&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#版本号&#34;&gt;#&lt;/a&gt; 版本号&lt;/h4&gt;
&lt;p&gt;包的版本号以 “点分十进制” 形式进行定义，总共有三位数字，如 2.24.0。其中每一位数字所代表的的含义如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;第1位数字：大版本
第2位数字：功能版本
第3位数字：Bug修复版本
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;版本号提升的规则：只要前面的版本号增长了，则后面的版本号归零&lt;br&gt;
包管理配置文件&lt;/p&gt;
&lt;p&gt;npm 规定，在项目根目录中，必须提供一个叫做 package.json 的包管理配置文件。用来记录与项目有关的一些配置信息。如&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;项目的名称、版本号、描述等
项目中都用到了哪些包
哪些包只在开发期间会用到
那些包在开发和部署时都需要用到

多人协作的问题

遇到的问题：第三方包的体积过大，不方便团队成员之间共享项目源代码。

解决方案：共享时剔除 node_modules

如何记录项目中安装了哪些包

在项目根目录 package.json 的配置文件用来记录项目中安装了哪些包。从而方便剔除 node_modules 目录之后，在团队成员之间共享项目的源代码

注意：今后在项目开发中，一定要把 node_modules文件夹，添加到 .gitignore 忽略文件中
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;快速创建-packagejson&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#快速创建-packagejson&#34;&gt;#&lt;/a&gt; 快速创建 package.json&lt;/h4&gt;
&lt;p&gt;npm 包管理工具提供了一个快捷命令，可以在执行命令时所处的目录中，快速创建 package.json 这个包管理配置文件。如下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm init -y&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;上述命令只能在英文的目录下成功运行！所以项目文件夹的名称一定要&lt;strong&gt;使用英文命名，不能出现空格&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;运行 npm install 命令安装包的时候，npm 包管理工具会自动把包的名称和版本号，记录到 package.json&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;一次性安装所有的包&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一次性安装所有的包&#34;&gt;#&lt;/a&gt; 一次性安装所有的包&lt;/h4&gt;
&lt;p&gt;拿到一个剔除了 node_modules 的项目之后，需要先把所有的包下载到项目中，才能将项目运行起来。否则会报类似于下面的错误&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c454ba6fc1d467786040e7ed7242a95~tplv-k3u1fbpfcp-watermark.image?&#34; alt=&#34;b9aaf60189f251209d1b929fe38c8d59.png&#34;&gt;&lt;br&gt;
 可以运行  &lt;code&gt;npm install&lt;/code&gt;  命令（或 npm i）一次性安装所有的依赖包&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm install&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;卸载包&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#卸载包&#34;&gt;#&lt;/a&gt; 卸载包&lt;/h4&gt;
&lt;p&gt;运行  &lt;code&gt;npm uninstall&lt;/code&gt;  命令，来卸载指定的包&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm uninstall 包名&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;npm uninstall 命令执行成功后，会把卸载的包，自动从 package.json 的 dependencies 中移除掉&lt;/p&gt;
&lt;h4 id=&#34;devdependencies节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#devdependencies节点&#34;&gt;#&lt;/a&gt; devDependencies 节点&lt;/h4&gt;
&lt;p&gt;如果某些包只在项目开发阶段会用到，在项目上线之后不会用到，则建议把这些包记录到 devDependencies 节点中。如果某些包在开发和项目上线之后都需要用到，则建议把这些包记录到 dependencies 节点中。可以使用如下的命令，将包记录到 devDependencies 节点中。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;//完整写法 包名和--save-dev顺序不重要&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;npm install 包名 --save-dev     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;或&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//常用简写&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;npm i 包名 -D&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;解决下包速度慢的问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解决下包速度慢的问题&#34;&gt;#&lt;/a&gt; &lt;strong&gt;解决下包速度慢的问题&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;npm 下包的时候，默认从国外的 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZWdpc3RyeS5ucG1qcy5vcmcv&#34;&gt;https://registry.npmjs.org/&lt;/span&gt; 服务器进行下载，可能会慢&lt;/li&gt;
&lt;li&gt;使用国内镜像服务器 - 淘宝，大幅改善下载速度&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/82ffaa81be4a4df69164986bc7231d41~tplv-k3u1fbpfcp-watermark.image?&#34; alt=&#34;72a14b6dbd9b216b1a31793bf56864df.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;切换npm-的下包镜像源&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#切换npm-的下包镜像源&#34;&gt;#&lt;/a&gt; 切换 npm 的下包镜像源&lt;/h4&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm config get registry 	# 查看当前包镜像源&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;npm config set registry=http://registry.npm.taobao.org/ # 切换源头&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;npm config get registry 	# 检查镜像源是否下载成功&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了方便的切换下包的镜像源，安装&lt;strong&gt; nrm&lt;/strong&gt; 小工具，利用 nrm 提供的终端命令，快速查看和切换下包的镜像源&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm install nrm -g	# -g 全局可用&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nrm ls							# 查看当前可用的镜像源地址list&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nrm use taobao			# 切换镜像源&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;包的分类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#包的分类&#34;&gt;#&lt;/a&gt; 包的分类&lt;/h4&gt;
&lt;p&gt;使用 npm 包管理工具下载的包，共分为两大类，分别是&lt;br&gt;
&lt;strong&gt;项目包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那些被安装到项目的 node_modules 目录中的包，都是项目包。项目包又分为两类&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;开发依赖包（被记录到 devDependencies节点中的包，只在开发期间会用到）npm i 包名 -D

核心依赖包（被记录到 dependencies节点中的包，在开发期间和项目上线之后都会用到）npm i 包名
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;全局包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在执行 npm install 命令时，如果提供了 -g 参数，则会把包安装为全局包&lt;/p&gt;
&lt;p&gt;全局包会被安装到 C:\Users\ 用户目录 \AppData\Roaming\npm\node_modules 目录下&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm install 包名 -g	# 全局安装指定的包&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;npm uninstall 包名 -g	# 卸载全局指定的包&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;只有工具性质的包，才有全局安装的必要性&lt;/strong&gt;。因为它们提供了好用的终端命令&lt;/li&gt;
&lt;li&gt;判断某个包是否需要全局安装后才能使用，可以参考官方提供的使用说明即可&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;i5ting_toc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#i5ting_toc&#34;&gt;#&lt;/a&gt; i5ting_toc&lt;/h5&gt;
&lt;p&gt;i5ting_toc 是一个可以把 md 文档转为 html 页面的小工具&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm i i5ting_toc -g			# 安装&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;i5ting_toc -f sample.md -o		# 转换&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;规范的包结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#规范的包结构&#34;&gt;#&lt;/a&gt; 规范的包结构&lt;/h4&gt;
&lt;p&gt;一个规范的包，它的组成结构，必须符合以下 3 点要求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包必须以单独的目录而存在&lt;/li&gt;
&lt;li&gt;包的顶级目录（点进去的目录）下要必须包含 package.json 这个包管理配置文件&lt;/li&gt;
&lt;li&gt;package.json 中必须包含 name，version，main 这三个属性，分别代表包的名字、版本号、包的入口 (.js 文件)（require () 加载的文件）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于更多的约束参考 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly95YXJucGtnLmNvbS96aC1IYW5zL2RvY3MvcGFja2FnZS1qc29u&#34;&gt;https://yarnpkg.com/zh-Hans/docs/package-json&lt;/span&gt;&lt;br&gt;
 开发包&lt;/p&gt;
&lt;p&gt;1 新建 itheima-tools 文件夹，作为包的根目录&lt;br&gt;
 2 在 itheima-tools 文件夹中，新建。也可以直接初始化（npm init -y）&lt;br&gt;
package.json （包管理配置文件）&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;quot;name&amp;quot;: &amp;quot;itheima-tools&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;quot;version&amp;quot;: &amp;quot;1.1.0&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;quot;main&amp;quot;: &amp;quot;index.js&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;quot;description&amp;quot;: &amp;quot;提供了格式化时间、HTMLEscape相关的功能&amp;quot;,//检索时出现的功能介绍&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;quot;keywords&amp;quot;: [//搜索关键词&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;itheima&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;dateFormat&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;escape&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;quot;license&amp;quot;: &amp;quot;ISC&amp;quot;//协议&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;●index.js （包的入口文件）&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// src 文件夹下开发代码，导入到 index.js 中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const date = require(&amp;#x27;./src/dateFormat&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const escape = require(&amp;#x27;./src/htmlEscape&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 向外暴露需要的成员&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;module.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...date,		// ... 展开运算符，将data所有属性交给新对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...escape		// ... 展开运算符，将escape所有属性交给新对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;src 源代码&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// dateFormat.js&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function dateFormat(dateStr) &amp;#123;/* 略 */&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function padZero(n) &amp;#123;return n &amp;gt; 9 ? n : &amp;#x27;0&amp;#x27; + n&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;module.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  dateFormat&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// htmlEscape.js&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function htmlEscape(htmlstr) &amp;#123;/* 略 */&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function htmlUnEscape(str) &amp;#123;/* 略 */&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;module.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  htmlEscape,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  htmlUnEscape&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL1JFQURNRS5tZA==&#34;&gt;README.md&lt;/span&gt; （包的说明文档）&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;安装&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;npm install itheima-tools&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;导入&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const itheima = require(&amp;#x27;itheima-tools&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;格式化时间&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 调用 dateFormat 对时间进行格式化&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const dtStr = itheima.dateFormat(new Date())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 结果  2020-04-03 17:20:58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(dtStr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;转义 HTML 中的特殊字符&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;略&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;原 HTML 中的特殊字符&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;略&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;开源协议&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ISC&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const itheima = require(&amp;#x27;./itheima-tools&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 格式化时间的功能&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const dtStr = itheima.dateFormat(new Date())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(dtStr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(&amp;#x27;-----------&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const htmlStr = &amp;#x27;&amp;lt;h1 title=&amp;quot;abc&amp;quot;&amp;gt;这是h1标签&amp;lt;span&amp;gt;123&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const str = itheima.htmlEscape(htmlStr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(str)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(&amp;#x27;-----------&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const str2 = itheima.htmlUnEscape(str)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(str2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;发布包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://www.npmjs.com/ 注册 npm 账号

在终端登录，终端中执行 npm login 命令，依次输入用户名、密码、邮箱后，即可登录成功

注意：执行命令前，必须先把下包的服务器地址切换为 npm 的官方服务器。否则会导致发布包失败！先用nrm命令检查一下，nrm use 命令切换。

终端切换到包的根目录之后，运行 npm publish 命令，即可将包发布到 npm 上（注意：包名不能雷同）

运行 npm unpublish 包名 --force命令，即可从 npm 删除已发布的包
●npm unpublish 命令只能删除 72 小时以内发布的包
●npm unpublish 删除的包，在 24 小时内不允许重复发布
●发布包的时候要慎重，尽量不要往 npm 上发布没有意义的包
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;模块的加载机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#模块的加载机制&#34;&gt;#&lt;/a&gt; 模块的加载机制&lt;/h3&gt;
&lt;p&gt;模块在第一次加载后会被缓存，多次调用 require () 模块的代码只会被执行一次。不论是内置模块、用户自定义模块、还是第三方模块，它们都会优先从缓存中加载，从而提高模块的加载效率。&lt;/p&gt;
&lt;h4 id=&#34;内置模块的加载机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#内置模块的加载机制&#34;&gt;#&lt;/a&gt; 内置模块的加载机制&lt;/h4&gt;
&lt;p&gt;​ ●内置模块的加载优先级最高（当第三方模块和内置模块同名时）&lt;/p&gt;
&lt;h4 id=&#34;自定义模块的加载机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自定义模块的加载机制&#34;&gt;#&lt;/a&gt; 自定义模块的加载机制&lt;/h4&gt;
&lt;p&gt;●使用 require () 加载自定义模块时，必须指定以 ./ 或 …/ 开头的路径标识符。在加载自定义模块时，如果没有指定 ./ 或 …/ 这样的路径标识符，则 node 会把它当作内置模块或第三方模块进行加载。&lt;/p&gt;
&lt;p&gt;●在使用 require () 导入自定义模块时，如果省略了文件的扩展名，Node.js 会按顺序分别尝试加载以下的文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;​ 按照确切的文件名进行加载
​ 补全 .js 扩展名进行加载
​ 补全 .json 扩展名进行加载
​ 补全 .node 扩展名进行加载
​ 加载失败，终端报错
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;第三方模块的加载机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第三方模块的加载机制&#34;&gt;#&lt;/a&gt; 第三方模块的加载机制&lt;/h4&gt;
&lt;p&gt;​ ●如果传递给 require () 的模块标识符不是一个内置模块，也没有以 ./ 或 …/ 开头，则 Node.js 会从当前模块的父目录开始，尝试从 /node_modules 文件夹中加载第三方模块&lt;br&gt;
​ ●如果没有找到对应的第三方模块，则移动到再上一层父目录中，进行加载，直到文件系统的根目录&lt;br&gt;
​ ●假设在 ‘C:\Users\itheima\project\node_modules\a.js’ 里调用 require (‘tools’)，Node.js 会按以下顺序查找&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:\Users\itheima\project\node_modules\tools
C:\Users\itheima\node_modules\tools
C:\Users\node_modules\tools
C:\node_modules\tools
报错
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;目录作为模块&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#目录作为模块&#34;&gt;#&lt;/a&gt; 目录作为模块&lt;/h4&gt;
&lt;p&gt;●当把目录作为模块标识符，传递给 require () 进行加载的时候，有三种加载方式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;在被加载的目录下查找一个叫做 package.json 的文件，并寻找 main 属性值作为 require() 加载的入口
如果目录里没有 package.json 文件，或者 main 入口不存在或无法解析，则 Node.js 将会试图加载目录下的 index.js 文件
如果以上两步都失败了，则 Node.js 会在终端打印错误消息，报告模块的缺失：Error: Cannot find module ‘xxx’
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xhtgit.github.io/HTworld.github.io/2023/03/21/NodeJS-fs%E6%A8%A1%E5%9D%97/</guid>
            <title>NodeJS-http模块</title>
            <link>https://xhtgit.github.io/HTworld.github.io/2023/03/21/NodeJS-fs%E6%A8%A1%E5%9D%97/</link>
            <pubDate>Tue, 21 Mar 2023 23:44:11 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;nodejs简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nodejs简介&#34;&gt;#&lt;/a&gt; NodeJs 简介&lt;/h2&gt;
&lt;h4 id=&#34;什么是-nodejs&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是-nodejs&#34;&gt;#&lt;/a&gt; 什么是 Node.js&lt;/h4&gt;
&lt;p&gt;Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境&lt;/p&gt;
&lt;h4 id=&#34;nodejs-中的-javascript-运行环境&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nodejs-中的-javascript-运行环境&#34;&gt;#&lt;/a&gt; Node.js 中的 JavaScript 运行环境&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;浏览器是 JavaScript 的前端运行环境&lt;/li&gt;
&lt;li&gt;Node.js 是 JavaScript 的后端运行环境&lt;/li&gt;
&lt;li&gt;Node.js 中无法调用 DOM 和 BOM 等浏览器内置 API&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;nodejs-可以做什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nodejs-可以做什么&#34;&gt;#&lt;/a&gt; Node.js 可以做什么&lt;/h4&gt;
&lt;p&gt;Node.js 作为一个 JavaScript 的运行环境，仅仅提供了基础的功能和 API。然而，基于 Node.js 提供的这些基础能，很多强大的工具和框架如雨后春笋，层出不穷，所以学会了 Node.js ，可以让前端程序员胜任更多的工作和岗位&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于 Express 框架 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5leHByZXNzanMuY29tLmNuLw==&#34;&gt;http://www.expressjs.com.cn/&lt;/span&gt; 可以快速构建 Web 应用&lt;/li&gt;
&lt;li&gt;基于 Electron 框架 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9lbGVjdHJvbmpzLm9yZy8=&#34;&gt;https://electronjs.org/&lt;/span&gt; 可以构建跨平台的桌面应用&lt;/li&gt;
&lt;li&gt;基于 restify 框架 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3Jlc3RpZnkuY29tLw==&#34;&gt;http://restify.com/&lt;/span&gt; 可以快速构建 API 接口项目&lt;/li&gt;
&lt;li&gt;读写和操作数据库、创建实用的命令行工具辅助前端开发、etc…&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;终端的一些快捷键&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#终端的一些快捷键&#34;&gt;#&lt;/a&gt; 终端的一些快捷键&lt;/h2&gt;
&lt;p&gt;shift + 鼠标右键 可以在该目录下打开 powershell 窗口&lt;br&gt;
在 powershell 中的快捷键：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⬆，可以快速定位到上一次执行的命令。&lt;/li&gt;
&lt;li&gt;tab 键，可以快速补全文件的路径（先输入第一个字，然后使用 tab 键，可以快速补全路径）&lt;/li&gt;
&lt;li&gt;ESC，可以快速清空已输入的命令&lt;/li&gt;
&lt;li&gt;cls，清空 powershell 面板&lt;/li&gt;
&lt;li&gt;./ 表示为当前目录，写不写都可以&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fs-文件系统模块&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#fs-文件系统模块&#34;&gt;#&lt;/a&gt; fs 文件系统模块&lt;/h2&gt;
&lt;h4 id=&#34;什么是-fs-文件系统模块&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是-fs-文件系统模块&#34;&gt;#&lt;/a&gt; 什么是 fs 文件系统模块&lt;/h4&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;fs 模块是 Node.js 官方提供的、用来操作文件的模块。提供了一系列的方法和属性，用来满足对文件的操作需求  &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果要在 JavaScript 代码中，使用 fs 模块来操作文件，则需要使用如下的方式先导入它&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const fs = require(&amp;quot;fs&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;fs.readFile(path[, option], callback)&lt;/code&gt;  读取指定文件中的内容&lt;br&gt;
 &lt;code&gt;path&lt;/code&gt;  必选参数，字符串，文件路径&lt;br&gt;
 &lt;code&gt;option&lt;/code&gt;  可选参数，设置字符集&lt;br&gt;
 &lt;code&gt;callback&lt;/code&gt;  必选参数，文件读取完成后的回调函数&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 1. 导入 fs 模块，来操作文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const fs = require(&amp;#x27;fs&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 2. 调用 fs.readFile() 方法读取文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//    参数1：读取文件的存放路径&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//    参数2：读取文件时候采用的编码格式，一般默认指定 utf8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//    参数3：回调函数，拿到读取失败和成功的结果  err  dataStr&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fs.readFile(&amp;#x27;./files/1.txt&amp;#x27;, &amp;#x27;utf8&amp;#x27;, function(err, dataStr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 2.1 打印失败的结果&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 如果读取成功，则 err 的值为 null&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 如果读取失败，则 err 的值为 错误对象，dataStr 的值为 undefined&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(&amp;#x27;-------&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 2.2 打印成功的结果&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(dataStr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//一般逻辑可以这么写：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fs.readFile(&amp;#x27;./files/11.txt&amp;#x27;, &amp;#x27;utf8&amp;#x27;, function(err, dataStr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return console.log(&amp;#x27;读取文件失败！&amp;#x27; + err.message)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(&amp;#x27;读取文件成功！&amp;#x27; + dataStr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;fs.writeFile(path, data[, option], callback)&lt;/code&gt;  向指定的文件中写入内容&lt;br&gt;
 &lt;code&gt;path&lt;/code&gt;  必选参数，字符串，文件路径&lt;br&gt;
 &lt;code&gt;data&lt;/code&gt;  必选参数，写入的内容&lt;br&gt;
 &lt;code&gt;option&lt;/code&gt;  可选参数，设置字符集，默认值是 utf&lt;br&gt;
 &lt;code&gt;callback&lt;/code&gt;  必选参数，文件写入完成后的回调函数&lt;br&gt;
 fs.writeFile () 方法只能用来创建文件，不能用来创建路径&lt;br&gt;
重复调用 fs.writeFile (写入同一个文件，新写入的内容会覆盖之前的旧内容&lt;br&gt;
&lt;strong&gt;注意：写入会覆盖原内容&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const fs = require(&amp;#x27;fs&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 2. 调用 fs.writeFile() 方法，写入文件的内容&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//    参数1：表示文件的存放路径&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//    参数2：表示要写入的内容&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//    参数3：回调函数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fs.writeFile(&amp;#x27;./files/3.txt&amp;#x27;, &amp;#x27;ok123&amp;#x27;, function(err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 2.1 如果文件写入成功，则 err 的值等于 null&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 2.2 如果文件写入失败，则 err 的值等于一个 错误对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // console.log(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//判断是否写入成功&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return console.log(&amp;#x27;文件写入失败！&amp;#x27; + err.message)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(&amp;#x27;文件写入成功！&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;省略第三个参数则默认为 UTF8 格式&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;路径动拼接的问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#路径动拼接的问题&#34;&gt;#&lt;/a&gt; 路径动拼接的问题&lt;/h4&gt;
&lt;p&gt;使用 fs 模块操作文件时，如果提供的操作路径是以./ 或…/ 开头的相对路径时，很容易出现路径动态拼接错误的问题。原因：代码在运行的时候，会以执行 node 命令时所处的目录，动态拼接出被操作文件的完整路径。&lt;br&gt;
解决方案：在使用 fs 模块操作文件时，直接提供完整的路径，不要提供。或…/ 开头的相对路径，从而防止路径动态拼接的问题。注意 js 中写完整路径要用 \，不然会被当成转义字符处理。但是这种方法移植性差。fs 中有解决办法。&lt;br&gt;
 &lt;code&gt;__dirname&lt;/code&gt;  表示当前文件所处的目录 **（即以 js 文件所处地方为基准） &lt;strong&gt;，不会根据打开 node 目录变化而变化&lt;/strong&gt;（即为打开 node 的地方为基准）&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;console.log(__dirname)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fs.readFile(__dirname + &amp;#x27;/files/1.txt&amp;#x27;, &amp;#x27;utf8&amp;#x27;, function(err, dataStr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return console.log(&amp;#x27;读取文件失败！&amp;#x27; + err.message)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(&amp;#x27;读取文件成功！&amp;#x27; + dataStr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;path-路径模块&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#path-路径模块&#34;&gt;#&lt;/a&gt; path 路径模块&lt;/h4&gt;
&lt;p&gt;path 模块是 Node.js 官方提供的、用来处理路径的模块。提供一系列的方法和属性，用来满足对路径的处理需求。如果要在 JavaScript 代码中，使用 path 模块来处理路径，则需要使用如下的方式先导入它&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const path = require(&amp;quot;path&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;path.join(...paths)&lt;/code&gt;  可以把多个路径片段拼接为完整的路径字符串&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意：凡是涉及到路径拼接的操作，都要使用 path.join () 方法进行处理。不直接使用 + 进行字符串的拼接&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const path = require(&amp;#x27;path&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const fs = require(&amp;#x27;fs&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 注意：  ../ 会抵消前面的路径&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const pathStr = path.join(&amp;#x27;/a&amp;#x27;, &amp;#x27;/b/c&amp;#x27;, &amp;#x27;../../&amp;#x27;, &amp;#x27;./d&amp;#x27;, &amp;#x27;e&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(pathStr)  // \a\b\d\e&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 取代fs.readFile(__dirname + &amp;#x27;/files/1.txt&amp;#x27;, ...)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fs.readFile(path.join(__dirname, &amp;#x27;./files/1.txt&amp;#x27;), &amp;#x27;utf8&amp;#x27;, function(err, dataStr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return console.log(err.message)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(dataStr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;path.basename(path[, ext])&lt;/code&gt;  可以获取路径中的最后一部分，经常通过这个方法获取路径中的文件名&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt; 必选参数，表示一个路径的字符串&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ext&lt;/strong&gt; 可选参数，表示文件扩展名&lt;/li&gt;
&lt;li&gt;返回 路径的最后一部分&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const path = require(&amp;#x27;path&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 定义文件的存放路径&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const fpath = &amp;#x27;/a/b/c/index.html&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const fullName = path.basename(fpath)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(fullName) // index.html&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const nameWithoutExt = path.basename(fpath, &amp;#x27;.html&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(nameWithoutExt) // index&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;path.extname(path)&lt;/code&gt;  可以获取路径中的扩展名部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;path 必选参数，表示一个路径的字符串&lt;/li&gt;
&lt;li&gt;返回 返回得到的扩展名字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const path = require(&amp;#x27;path&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 这是文件的存放路径&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const fpath = &amp;#x27;/a/b/c/index.html&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const fext = path.extname(fpath)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(fext)//输出.html&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xhtgit.github.io/HTworld.github.io/2023/03/21/NodeJS-http%E6%A8%A1%E5%9D%97/</guid>
            <title>NodeJS-http模块</title>
            <link>https://xhtgit.github.io/HTworld.github.io/2023/03/21/NodeJS-http%E6%A8%A1%E5%9D%97/</link>
            <pubDate>Tue, 21 Mar 2023 14:03:09 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;http模块&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#http模块&#34;&gt;#&lt;/a&gt; http 模块&lt;/h2&gt;
&lt;p&gt;http 模块是 Node.js 官方提供的用来创建 web 服务器的模块&lt;/p&gt;
&lt;p&gt;通过 http 模块提供的 http.createServer () 方法，就能方便的把一台普通的电脑，变成一台 Web 服务器，从而对外提供 Web 资源服务。&lt;br&gt;
在 Node.js 中，不需要使用 IIS、Apache（针对 php） 等第三方 web 服务器软件（普通的电脑常常安装这些），而是基于 Node.js 提供的 http 模块，通过几行简单的代码，就能轻松的手写一个服务器软件，从而对外提供 web 服务&lt;/p&gt;
&lt;p&gt;导入 http 模块创建 Web 服务器：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const http = require(&amp;quot;http&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;服务器相关的概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#服务器相关的概念&#34;&gt;#&lt;/a&gt; 服务器相关的概念&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IP地址&lt;/code&gt; ，就是互联网上每台计算机的唯一地址，因此 IP 地址具有唯一性。如果把 “个人电脑” 比作 “一台电话”，那么 “IP 地址” 就相当于 “电话号码”，只有在知道对方 IP 地址的前提下，才能与对应的电脑之间进行数据通信。&lt;br&gt;
IP 地址的格式：通常用 “点分十进制” 表示成（a.b.c.d）的形式，其中，a,b,c,d 都是 0~255 之间的十进制整数。例如：用点分十进表示的 IP 地址（192.168.1.1）&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;注意:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- 互联网中每台 Web 服务器，都有自己的 IP 地址，如：可以在 Windows 的终端中运行 ping www.baidu.com 命令，即可查看到百度服务器的 IP 地址   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- 在开发期间，自己的电脑既是一台服务器，也是一个客户端，为了方便测试，可以在自己的浏览器中输入 127.0.0.1 这个 IP 地址，就能把自己的电脑当做一台服务器进行访问了&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;域名和域名服务器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#域名和域名服务器&#34;&gt;#&lt;/a&gt; 域名和域名服务器&lt;/h4&gt;
&lt;p&gt;尽管 IP 地址能够唯一地标记网络上的计算机，但 IP 地址是一长串数字，不直观，而且不便于记忆，于是人们又发明了另一套字符型的地址方案，即所谓的域名（Domain Name）地址。&lt;/p&gt;
&lt;p&gt;IP 地址和域名是一一对应的关系，这份对应关系存放在一种叫做域名服务器 (DNS，Domain name server) 的电脑中。使用者只需通过好记的域名访问对应的服务器即可，对应的转换工作由域名服务器实现。因此，域名服务器就是提供 IP 地址和域名之间的转换服务的服务器。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 单纯使用 IP 地址，互联网中的电脑也能够正常工作。但是有了域名的加持，能让互联网的世界变得更加方便&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- 在开发测试期间， 127.0.0.1对应的域名是 localhost，都代表自己的这台电脑，在使用效果上没有任何区别&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;端口号&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#端口号&#34;&gt;#&lt;/a&gt; 端口号&lt;/h4&gt;
&lt;p&gt;计算机中的端口号，就好像是现实生活中的门牌号一样。通过门牌号，外卖小哥可以在整栋大楼众多的房间中，准确把外卖送到你的手中。&lt;br&gt;
同样的道理，在一台电脑中，可以运行成百上千个 web 服务。每个 web 服务都对应一个唯一的端口号。客户端发送过来的网络请求，通过端口号，可以被准确地交给对应的 web 服务进行处理。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 每个端口号不能同时被多个 web 服务占用&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- 在实际应用中，URL 中的 80 端口可以被省略&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;创建-web-服务器的基本步骤&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建-web-服务器的基本步骤&#34;&gt;#&lt;/a&gt; &lt;strong&gt;创建 web 服务器的基本步骤&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;导入 http 模块&lt;/li&gt;
&lt;li&gt;创建 web 服务器实例&lt;/li&gt;
&lt;li&gt;&lt;code&gt;server.on()&lt;/code&gt;  为服务器实例绑定 request 事件，监听客户端的请求&lt;/li&gt;
&lt;li&gt;启动服务器&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 1. 导入 http 模块&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const http = require(&amp;#x27;http&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 2. 创建 web 服务器实例&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const server = http.createServer()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 3. 为服务器实例绑定 request 事件，监听客户端的请求&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;server.on(&amp;#x27;request&amp;#x27;, function (req, res) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(&amp;#x27;Someone visit our web server.&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 4. 启动服务器&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;server.listen(8080, function () &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(&amp;#x27;server running at http://127.0.0.1:8080&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;req请求对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#req请求对象&#34;&gt;#&lt;/a&gt; req 请求对象&lt;/h4&gt;
&lt;p&gt;只要服务器接收到了客户端的请求，就会调用通过 server.on () 为服务器绑定的 request 事件处理函数&lt;/p&gt;
&lt;h4 id=&#34;res响应对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#res响应对象&#34;&gt;#&lt;/a&gt; res 响应对象&lt;/h4&gt;
&lt;p&gt;在服务器 request 事件处理函数中，如果想访问与服务器相关的数据或属性，通过 &lt;code&gt;res.end(data）&lt;/code&gt;  方法响应&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;server.on(&amp;#x27;request&amp;#x27;, (req, res) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // req.url 是客户端请求的 URL 地址&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  const url = req.url&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // req.method 是客户端请求的 method 类型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  const method = req.method&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  const str = `Your request url is $&amp;#123;url&amp;#125;, and request method is $&amp;#123;method&amp;#125;`&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(str)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 调用 res.end() 方法，向客户端响应一些内容&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  res.end(str)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;解决中文乱码问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解决中文乱码问题&#34;&gt;#&lt;/a&gt; 解决中文乱码问题&lt;/h4&gt;
&lt;p&gt;当调用 res.end () 方法，向客户端发送中文内容的时候，会出现乱码问题，此时，需要手动设置内容的编码格式&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;server.on(&amp;#x27;request&amp;#x27;, (req, res) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 定义一个字符串，包含中文的内容&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  const str = `您请求的 URL 地址是 $&amp;#123;req.url&amp;#125;，请求的 method 类型为 $&amp;#123;req.method&amp;#125;`&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 调用 res.setHeader() 方法，设置 Content-Type 响应头，解决中文乱码的问题&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  res.setHeader(&amp;#x27;Content-Type&amp;#x27;, &amp;#x27;text/html; charset=utf-8&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // res.end() 将内容响应给客户端&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  res.end(str)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;例子&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#例子&#34;&gt;#&lt;/a&gt; 例子&lt;/h4&gt;
&lt;p&gt;根据不同的 url 响应不同的 html 内容&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取请求的 url 地址&lt;/li&gt;
&lt;li&gt;设置默认的响应内容为 404 Not found&lt;/li&gt;
&lt;li&gt;判断用户请求的是否为 / 或 /index.html 首页&lt;/li&gt;
&lt;li&gt;判断用户请求的是否为 /about.html 关于页面&lt;/li&gt;
&lt;li&gt;设置 Content-Type 响应头，防止中文乱码&lt;/li&gt;
&lt;li&gt;使用 res.end () 把内容响应给客户端&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const http = require(&amp;#x27;http&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const server = http.createServer()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;server.on(&amp;#x27;request&amp;#x27;, (req, res) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 1. 获取请求的 url 地址&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  const url = req.url&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 2. 设置默认的响应内容为 404 Not found&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  let content = &amp;#x27;&amp;lt;h1&amp;gt;404 Not found!&amp;lt;/h1&amp;gt;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 3. 判断用户请求的是否为 / 或 /index.html 首页&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 4. 判断用户请求的是否为 /about.html 关于页面&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if (url === &amp;#x27;/&amp;#x27; || url === &amp;#x27;/index.html&amp;#x27;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    content = &amp;#x27;&amp;lt;h1&amp;gt;首页&amp;lt;/h1&amp;gt;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125; else if (url === &amp;#x27;/about.html&amp;#x27;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    content = &amp;#x27;&amp;lt;h1&amp;gt;关于页面&amp;lt;/h1&amp;gt;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 5. 设置 Content-Type 响应头，防止中文乱码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  res.setHeader(&amp;#x27;Content-Type&amp;#x27;, &amp;#x27;text/html; charset=utf-8&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 6. 使用 res.end() 把内容响应给客户端&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  res.end(content)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;server.listen(80, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(&amp;#x27;server running at http://127.0.0.1&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
    </channel>
</rss>
