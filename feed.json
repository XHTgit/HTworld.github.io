{
    "version": "https://jsonfeed.org/version/1",
    "title": "HT的小天地",
    "description": "",
    "home_page_url": "https://xhtgit.github.io/HTworld.github.io",
    "items": [
        {
            "id": "https://xhtgit.github.io/HTworld.github.io/2023/03/21/NodeJS-fs%E6%A8%A1%E5%9D%97/",
            "url": "https://xhtgit.github.io/HTworld.github.io/2023/03/21/NodeJS-fs%E6%A8%A1%E5%9D%97/",
            "title": "NodeJS-fs模块",
            "date_published": "2023-03-21T06:03:09.258Z",
            "content_html": "<h2 id=\"http模块\"><a href=\"#http模块\" class=\"headerlink\" title=\"http模块\"></a>http模块</h2><p>http 模块是 Node.js 官方提供的用来创建 web 服务器的模块</p>\n<p>通过 http 模块提供的 http.createServer() 方法，就能方便的把一台普通的电脑，变成一台 Web 服务器，从而对外提供 Web 资源服务。<br>在 Node.js 中，不需要使用 IIS、Apache（针对php） 等第三方 web 服务器软件（普通的电脑常常安装这些），而是基于 Node.js 提供的 http 模块，通过几行简单的代码，就能轻松的手写一个服务器软件，从而对外提供 web 服务</p>\n<p>导入 http 模块创建 Web 服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const http = require(&quot;http&quot;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"服务器相关的概念\"><a href=\"#服务器相关的概念\" class=\"headerlink\" title=\"服务器相关的概念\"></a>服务器相关的概念</h4><ul>\n<li><code>IP地址</code>，就是互联网上每台计算机的唯一地址，因此 IP 地址具有唯一性。如果把“个人电脑”比作“一台电话”，那么“IP地址”就相当于“电话号码”，只有在知道对方 IP 地址的前提下，才能与对应的电脑之间进行数据通信。<br>IP 地址的格式：通常用“点分十进制”表示成（a.b.c.d）的形式，其中，a,b,c,d都是 0~255 之间的十进制整数。例如：用点分十进表示的 IP地址（192.168.1.1）  </li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意:</span><br><span class=\"line\">- 互联网中每台 Web 服务器，都有自己的 IP 地址，如：可以在 Windows 的终端中运行 ping www.baidu.com 命令，即可查看到百度服务器的 IP 地址   </span><br><span class=\"line\">- 在开发期间，自己的电脑既是一台服务器，也是一个客户端，为了方便测试，可以在自己的浏览器中输入 127.0.0.1 这个 IP 地址，就能把自己的电脑当做一台服务器进行访问了</span><br></pre></td></tr></table></figure>\n<h4 id=\"域名和域名服务器\"><a href=\"#域名和域名服务器\" class=\"headerlink\" title=\"域名和域名服务器\"></a>域名和域名服务器</h4><p>尽管 IP 地址能够唯一地标记网络上的计算机，但IP地址是一长串数字，不直观，而且不便于记忆，于是人们又发明了另一套字符型的地址方案，即所谓的域名（Domain Name）地址。  </p>\n<p>IP地址和域名是一一对应的关系，这份对应关系存放在一种叫做域名服务器(DNS，Domain name server)的电脑中。使用者只需通过好记的域名访问对应的服务器即可，对应的转换工作由域名服务器实现。因此，域名服务器就是提供 IP 地址和域名之间的转换服务的服务器。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 单纯使用 IP 地址，互联网中的电脑也能够正常工作。但是有了域名的加持，能让互联网的世界变得更加方便</span><br><span class=\"line\">- 在开发测试期间， 127.0.0.1对应的域名是 localhost，都代表自己的这台电脑，在使用效果上没有任何区别</span><br></pre></td></tr></table></figure>\n<h4 id=\"端口号\"><a href=\"#端口号\" class=\"headerlink\" title=\"端口号\"></a>端口号</h4><p>计算机中的端口号，就好像是现实生活中的门牌号一样。通过门牌号，外卖小哥可以在整栋大楼众多的房间中，准确把外卖送到你的手中。<br>同样的道理，在一台电脑中，可以运行成百上千个 web 服务。每个 web 服务都对应一个唯一的端口号。客户端发送过来的网络请求，通过端口号，可以被准确地交给对应的 web 服务进行处理。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 每个端口号不能同时被多个 web 服务占用</span><br><span class=\"line\">- 在实际应用中，URL 中的 80 端口可以被省略</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-web-服务器的基本步骤\"><a href=\"#创建-web-服务器的基本步骤\" class=\"headerlink\" title=\"创建 web 服务器的基本步骤\"></a><strong>创建 web 服务器的基本步骤</strong></h3><ol>\n<li>导入 http 模块</li>\n<li>创建 web 服务器实例</li>\n<li><code>server.on()</code> 为服务器实例绑定 request事件，监听客户端的请求</li>\n<li>启动服务器</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. 导入 http 模块</span><br><span class=\"line\">const http = require(&#x27;http&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. 创建 web 服务器实例</span><br><span class=\"line\">const server = http.createServer()</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. 为服务器实例绑定 request 事件，监听客户端的请求</span><br><span class=\"line\">server.on(&#x27;request&#x27;, function (req, res) &#123;</span><br><span class=\"line\">  console.log(&#x27;Someone visit our web server.&#x27;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 4. 启动服务器</span><br><span class=\"line\">server.listen(8080, function () &#123;  </span><br><span class=\"line\">  console.log(&#x27;server running at http://127.0.0.1:8080&#x27;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"req请求对象\"><a href=\"#req请求对象\" class=\"headerlink\" title=\"req请求对象\"></a>req请求对象</h4><p>只要服务器接收到了客户端的请求，就会调用通过 server.on() 为服务器绑定的 request 事件处理函数</p>\n<h4 id=\"res响应对象\"><a href=\"#res响应对象\" class=\"headerlink\" title=\"res响应对象\"></a>res响应对象</h4><p>在服务器 request 事件处理函数中，如果想访问与服务器相关的数据或属性，通过<code>res.end(data）</code> 方法响应</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.on(&#x27;request&#x27;, (req, res) =&gt; &#123;</span><br><span class=\"line\">  // req.url 是客户端请求的 URL 地址</span><br><span class=\"line\">  const url = req.url</span><br><span class=\"line\">  // req.method 是客户端请求的 method 类型</span><br><span class=\"line\">  const method = req.method</span><br><span class=\"line\">  const str = `Your request url is $&#123;url&#125;, and request method is $&#123;method&#125;`</span><br><span class=\"line\">  console.log(str)</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 调用 res.end() 方法，向客户端响应一些内容</span><br><span class=\"line\">  res.end(str)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"解决中文乱码问题\"><a href=\"#解决中文乱码问题\" class=\"headerlink\" title=\"解决中文乱码问题\"></a>解决中文乱码问题</h4><p>当调用 res.end() 方法，向客户端发送中文内容的时候，会出现乱码问题，此时，需要手动设置内容的编码格式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.on(&#x27;request&#x27;, (req, res) =&gt; &#123;</span><br><span class=\"line\">  // 定义一个字符串，包含中文的内容</span><br><span class=\"line\">  const str = `您请求的 URL 地址是 $&#123;req.url&#125;，请求的 method 类型为 $&#123;req.method&#125;`</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 调用 res.setHeader() 方法，设置 Content-Type 响应头，解决中文乱码的问题</span><br><span class=\"line\">  res.setHeader(&#x27;Content-Type&#x27;, &#x27;text/html; charset=utf-8&#x27;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  // res.end() 将内容响应给客户端</span><br><span class=\"line\">  res.end(str)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><p>根据不同的 url 响应不同的 html 内容</p>\n<ol>\n<li>获取请求的 url地址</li>\n<li>设置默认的响应内容为 404 Not found</li>\n<li>判断用户请求的是否为 / 或 /index.html 首页</li>\n<li>判断用户请求的是否为 /about.html 关于页面</li>\n<li>设置 Content-Type 响应头，防止中文乱码</li>\n<li>使用 res.end() 把内容响应给客户端</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const http = require(&#x27;http&#x27;)</span><br><span class=\"line\">const server = http.createServer()</span><br><span class=\"line\"></span><br><span class=\"line\">server.on(&#x27;request&#x27;, (req, res) =&gt; &#123;</span><br><span class=\"line\">  // 1. 获取请求的 url 地址</span><br><span class=\"line\">  const url = req.url</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 2. 设置默认的响应内容为 404 Not found</span><br><span class=\"line\">  let content = &#x27;&lt;h1&gt;404 Not found!&lt;/h1&gt;&#x27;</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 3. 判断用户请求的是否为 / 或 /index.html 首页</span><br><span class=\"line\">  // 4. 判断用户请求的是否为 /about.html 关于页面</span><br><span class=\"line\">  if (url === &#x27;/&#x27; || url === &#x27;/index.html&#x27;) &#123;</span><br><span class=\"line\">    content = &#x27;&lt;h1&gt;首页&lt;/h1&gt;&#x27;</span><br><span class=\"line\">  &#125; else if (url === &#x27;/about.html&#x27;) &#123;</span><br><span class=\"line\">    content = &#x27;&lt;h1&gt;关于页面&lt;/h1&gt;&#x27;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 5. 设置 Content-Type 响应头，防止中文乱码</span><br><span class=\"line\">  res.setHeader(&#x27;Content-Type&#x27;, &#x27;text/html; charset=utf-8&#x27;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 6. 使用 res.end() 把内容响应给客户端</span><br><span class=\"line\">  res.end(content)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(80, () =&gt; &#123;</span><br><span class=\"line\">  console.log(&#x27;server running at http://127.0.0.1&#x27;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n",
            "tags": []
        }
    ]
}